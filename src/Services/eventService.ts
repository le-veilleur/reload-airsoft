import axios from "axios";
import Cookies from "js-cookie";
import { CreateEventData, CreateEventResponse } from "../Interfaces/types";

// TEMPORAIRE : URL directe vers le backend pour tester sans proxy
const API_BASE_URL = "http://localhost:8080/api/v1";

// Configuration globale d'Axios
const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    "Content-Type": "application/json"
  }
  // withCredentials retir√© car il cause des probl√®mes CORS
  // Le token sera envoy√© via l'en-t√™te Authorization
});

// Intercepteur pour ajouter le token aux requ√™tes
api.interceptors.request.use(
  (config) => {
    const token = Cookies.get("JWT-Reload-airsoft");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Fonction pour obtenir tous les √©v√©nements
export const getAllEvents = async (forceRefresh: boolean = false) => {
  try {
    const url = forceRefresh ? `events?refresh=${Date.now()}` : "events";
    const response = await api.get(url);
    console.log("R√©ponse des √©v√©nements : ", response.data);
    return response.data;
  } catch (error) {
    handleAxiosError(error, "r√©cup√©ration des √©v√©nements");
  }
};

// Fonction pour obtenir un √©v√©nement sp√©cifique par ID
export const getEventById = async (id: string, forceRefresh: boolean = false) => {
  try {
    const url = forceRefresh ? `events/${id}?refresh=${Date.now()}` : `events/${id}`;
    const response = await api.get(url);
    console.log("R√©ponse des √©v√©nements getEventById : ", response.data);
    return response.data;
  } catch (error) {
    handleAxiosError(error, "r√©cup√©ration de l'√©v√©nement");
  }
};

// Fonction pour cr√©er un nouvel √©v√©nement (FormData - ancienne version)
export const createEvent = async (eventData: FormData) => {
  try {
    const response = await api.post("/event/evenement/new", eventData, {
      headers: {
        "Content-Type": "multipart/form-data"
      }
    });
    return response.data;
  } catch (error) {
    handleAxiosError(error, "cr√©ation de l'√©v√©nement");
  }
};

// Fonction pour cr√©er un nouvel √©v√©nement avec JSON
export const createEventWithJson = async (eventData: CreateEventData): Promise<CreateEventResponse> => {
  try {
    // Si on veut forcer la cr√©ation de nouvelles coordonn√©es, ajouter un identifiant unique
    if (eventData.location && eventData.location.address) {
      // V√©rifier si l'adresse semble d√©j√† unique (contient un timestamp ou ID)
      const hasUniqueIdentifier = /\d{13}|\([a-f0-9-]{36}\)|\s#\d+$/.test(eventData.location.address);
      
      if (!hasUniqueIdentifier) {
        // Ajouter un identifiant unique discret √† l'adresse
        const uniqueId = Date.now();
        eventData.location.address = `${eventData.location.address} #${uniqueId}`;
        console.log("üîß Adresse rendue unique:", eventData.location.address);
      }
    }
    
    const response = await api.post("events", eventData);
    console.log("√âv√©nement cr√©√© avec succ√®s :", response.data);
    return response.data;
  } catch (error) {
    handleAxiosError(error, "cr√©ation de l'√©v√©nement");
    throw error;
  }
};

// Fonction pour mettre √† jour un √©v√©nement sp√©cifique par ID (JSON)
export const updateEventWithJson = async (id: string, eventData: any) => {
  try {
    const response = await api.put(`events/${id}`, eventData);
    console.log("√âv√©nement mis √† jour avec succ√®s :", response.data);
    return response.data;
  } catch (error) {
    handleAxiosError(error, "mise √† jour de l'√©v√©nement");
    throw error;
  }
};

// Fonction pour mettre √† jour un √©v√©nement sp√©cifique par ID (FormData - ancienne version)
export const updateEvent = async (id: string, eventData: FormData) => {
  try {
    const response = await api.put(`/event/evenements/${id}`, eventData, {
      headers: {
        "Content-Type": "multipart/form-data"
      }
    });
    return response.data;
  } catch (error) {
    handleAxiosError(error, "mise √† jour de l'√©v√©nement");
  }
};

// Fonction pour supprimer un √©v√©nement sp√©cifique par ID
export const deleteEvent = async (id: string) => {
  try {
    const response = await api.delete(`/event/evenements/${id}`);
    return response.data;
  } catch (error) {
    handleAxiosError(error, "suppression de l'√©v√©nement");
  }
};

// Fonction pour forcer le rafra√Æchissement du cache
export const clearEventCache = () => {
  // Ajouter un timestamp pour forcer le rafra√Æchissement
  const timestamp = Date.now();
  
  // Invalider le cache en modifiant les requ√™tes futures
  api.defaults.params = { ...api.defaults.params, _cache_bust: timestamp };
  
  // Nettoyer apr√®s 1 seconde pour √©viter d'encombrer les requ√™tes futures
  setTimeout(() => {
    if (api.defaults.params && api.defaults.params._cache_bust) {
      delete api.defaults.params._cache_bust;
    }
  }, 1000);
  
  console.log("üîÑ Cache des √©v√©nements vid√©, timestamp:", timestamp);
};

// Fonction de gestion des erreurs Axios
const handleAxiosError = (error: any, action: string) => {
  if (axios.isAxiosError(error)) {
    if (error.response) {
      console.error(`Erreur Axios lors de la ${action}:`, error.response.data);
    } else {
      console.error(`Erreur Axios lors de la ${action}:`, error.message);
    }
  } else {
    console.error(`Erreur inconnue lors de la ${action}:`, error);
  }
  throw error;
};
